@mixin box-shadow($shadow1) {
  -webkit-box-shadow: $shadow1;
  -moz-box-shadow:    $shadow1;
  box-shadow:         $shadow1;
}
@mixin box-shadows($shadow1, $shadow2) {
  -webkit-box-shadow: $shadow1, $shadow2;
  -moz-box-shadow:    $shadow1, $shadow2;
  box-shadow:         $shadow1, $shadow2;
}
@mixin transition($seconds) {
  -webkit-transition: $seconds;
  -moz-transition:    $seconds;
  -o-transition:      $seconds;
  transition:         $seconds;
}
@mixin opacity($opa) {
  filter: Alpha(Opacity=#{$opa});
  opacity: $opa/100;
}
@mixin transform($transforms) {
  -webkit-transform:  $transforms;
  -ms-transform:      $transforms;
  transform:          $transforms;
}
@mixin transform-origin($x, $y) {
  -webkit-transform-origin:  $x $y;
  -ms-transform-origin:      $x $y;
  transform-origin:          $x $y;
}
@mixin border-radius($radius) {
  -webkit-border-radius:  $radius;
  -moz-border-radius:     $radius;
  border-radius:          $radius;
}
@mixin border-radius2($topleft, $topright, $bottomright, $bottomleft) {
  -webkit-border-radius:  $topleft $topright $bottomright $bottomleft;
  -moz-border-radius:     $topleft $topright $bottomright $bottomleft;
  border-radius:          $topleft $topright $bottomright $bottomleft;
}
@mixin user-select($type) {
  -webkit-user-select:  $type;
  -moz-user-select:     $type;
  -ms-user-select:      $type;
}
@mixin box-sizing($sizing) {
  -webkit-box-sizing: $sizing;
  -moz-box-sizing:    $sizing;
  box-sizing:         $sizing;
}
@mixin background-size($size) {
  -webkit-background-size:  unquote($size);
  -moz-background-size:     unquote($size);
  -o-background-size:       unquote($size);
  background-size:          unquote($size);
}
@mixin col-c($count) {
  -webkit-column-count: $count;
  -moz-column-count:    $count;
  column-count:         $count;
}
@function position($direction) {
  $position: $direction;

  @if($direction == 'up') {
    $position: 'top';
  } @else if($direction == 'down') {
    $position: 'bottom';
  } @else if($direction == 'left') {
    $position: 'left';
  } @else {
    $position: 'right';
  }

  @return $position;
}
@function opposite-position($direction) {
  $opposite: $direction;

  @if($direction == 'up') {
    $opposite: 'bottom';
  } @else if($direction == 'down') {
    $opposite: 'top';
  } @else if($direction == 'left') {
    $opposite: 'right';
  } @else {
    $opposite: 'left';
  }

  @return $opposite;
}

@mixin linear-g($direction, $fallback, $from, $to) {
  $directions: get-direction($direction);

  background: $fallback;
  background: -webkit-gradient(linear, unquote(nth($directions, 2)), color-stop(0%, $from), color-stop(100%, $to));
  background: -webkit-linear-gradient(unquote(nth($directions, 1)), $from 0%, $to 100%);
  background:    -moz-linear-gradient(unquote(nth($directions, 1)), $from 0%, $to 100%);
  background:     -ms-linear-gradient(unquote(nth($directions, 1)), $from 0%, $to 100%);
  background:      -o-linear-gradient(unquote(nth($directions, 1)), $from 0%, $to 100%);
  background:         linear-gradient($direction, $from 0%, $to 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 );
}
@mixin multiple-linear-g($args) {
  $gradient: ();
  $deg: nth($args, 1) + "deg";

  @each $cs in $args {
    @if(type-of($cs) != 'number') {
      $gradient: append($gradient, unquote($cs), comma);
    }
  }
  background-image: -webkit-linear-gradient(unquote($deg), $gradient);
  background-image:    -moz-linear-gradient(unquote($deg), $gradient);
  background-image:      -o-linear-gradient(unquote($deg), $gradient);
  background-image:         linear-gradient(unquote($deg), $gradient);
}
@mixin size($w, $h) {
  width: $w;
  height: $h;
}
@mixin line-height($h, $lh) {
  height: $h;
  line-height: $lh;
}
@mixin font($size, $weight) {
  font-size: $size;
  font-weight: $weight;
}
@mixin tblr($t, $b, $l, $r) {
  top: $t;
  bottom: $b;
  left: $l;
  right: $r;
}
@mixin tblr-cust($args...) {
  @each $pair in $args {
    #{nth($pair, 1)}: #{nth($pair, 2)};
  }
}
@mixin color($index, $color) {
  &.color#{$index}:after {
    background: #{$color};
    border: solid 2px #{$color};
  }
}
@mixin trans-rotate($deg) {
  -webkit-transform:  rotate(#{$deg});
  -ms-transform:      rotate(#{$deg});
  transform:          rotate(#{$deg});
}
@mixin text-overflow {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
@mixin appearance($val) {
  -webkit-appearance: #{$val};
  -moz-appearance:    #{$val};
  appearance:         #{$val};
}

/* -------------------- Functions -------------------- */
@function get-direction($direction) {
  $old-direction: $direction;
  $veryold-direction: $direction;

  @if($direction == 'to bottom') {
    $old-direction: 'top';
    $veryold-direction: 'left top, left bottom';
  } @else {
    $old-direction: 'left';
    $veryold-direction: 'left top, right top';
  }

  @return $old-direction, $veryold-direction;
}
/* -------------------- END Functions -------------------- */